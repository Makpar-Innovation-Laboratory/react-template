version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: latest
      python: 3.9
    commands:
      # initialize environment
      - |
        if [ "${BRANCH}" != prod ]
        then
          export ENV="-${BRANCH}"
        else
          export ENV=""
        fi
      - cd frontend && npm install

      # # Download sonar scanner
      # - |
      #   curl https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip \
      #       -o "sonar_scanner.zip"
      #   unzip sonar_scanner.zip > /dev/null 2>&1
      #   export PATH=$(pwd)/sonar-scanner-4.6.2.2472-linux/bin/:$PATH
  
  # pre_build:
  #   commands:
  #     # Lint Source Code
  #     - |
  #       npx eslint --quiet \
  #         --no-error-on-unmatched-pattern ./src/** \
  #         --output-file ../docs/linting/index.html \
  #         --format html \
  #         || true
  #       aws s3 cp ../docs/linting/index.html \
  #               s3://${APPLICATION}-coverage${ENV}/linting/react/index.html
      
      # # SonarQube Static Code Analysis
      # - |
      #   sonar-scanner \
      #     -Dsonar.projectKey=${APPLICATION}-frontend${ENV} \
      #     -Dsonar.sources=./src/ \
      #     -Dsonar.host.url=http://$SONAR_URL:9000 \
      #     -Dsonar.login=$SONAR_TOKEN \
      #     -Dsonar.log.level=DEBUG \
      #     -Dsonar.exclusions=**/*.json,**/*.css,**/*.test.js,**/*.svg \
      #     -Dsonar.sources=$(pwd)/src \
      #     -Dsonar.sourceEncoding=UTF-8
      # # -Dsonar.coverageReportPaths=path/to/coverage.xml
      # # see: https://docs.sonarqube.org/latest/analysis/coverage/

      
  build:
    commands:
      - |
        npm run build
        aws s3 cp ./build/. \
          s3://${APPLICATION}-frontend${ENV}-web \
            --recursive

cache:
  path:
    - frontend/node_modules