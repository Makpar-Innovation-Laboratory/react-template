version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: latest
      python: 3.9
    commands:
      # initialize environment
      - |
        if [ "${BRANCH}" != prod ]
        then
          export ENV="-${BRANCH}"
        else
          export ENV=""
        fi
      # install frontend dependencies
      - |
        cd frontend
        npm install --force
      # startup docker
      - |
        nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay&
        timeout 15 sh -c "until docker info; do echo .; sleep 1; done" 
      - |
        pip install behave==1.2.6 \
                    behave-html-formatter==0.9.8 \
                    requests==2.26.0 \
                    selenium==4.0.0 \
                    git-remote-codecommit==1.15.1
      # Download sonar scanner
      - |
        curl https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip \
            -o "sonar_scanner.zip"
        unzip sonar_scanner.zip > /dev/null 2>&1
        export PATH=$(pwd)/sonar-scanner-4.6.2.2472-linux/bin/:$PATH
  
  pre_build:
    commands:
      # Lint Source Code
      # - |
      #   npx eslint --quiet \
      #     --no-error-on-unmatched-pattern ./src/** \
      #     --output-file ../docs/linting/index.html \
      #     --format html \
      #     || true
      #   aws s3 cp ../docs/linting/index.html \
      #           s3://${APPLICATION}-coverage${ENV}/linting/react/index.html
      
      # SonarQube Static Code Analysis
      - |
        sonar-scanner \
          -Dsonar.projectKey=${APPLICATION}-frontend${ENV} \
          -Dsonar.sources=./src/ \
          -Dsonar.host.url=http://$SONAR_URL:9000 \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.log.level=DEBUG \
          -Dsonar.exclusions=**/*.json,**/*.css,**/*.test.js,**/*.svg \
          -Dsonar.sources=$(pwd)/src \
          -Dsonar.sourceEncoding=UTF-8
      # -Dsonar.coverageReportPaths=path/to/coverage.xml
      # see: https://docs.sonarqube.org/latest/analysis/coverage/

      
  build:
    commands:
      - |
        docker build -t ${APPLICATION}-frontend:${BRANCH^} .
        docker tag ${APPLICATION}-frontend:${BRANCH^} \
            $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/${APPLICATION}-frontend:${BRANCH^}
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/${APPLICATION}-frontend:${BRANCH^}
  
  post_build:
    commands:
      # BDD Tests
      # - |
      #   git clone codecommit://${APPLICATION}-test-harness
      #   cd ${APPLICATION}-test-harness/python
      #   export FRONTEND_HOST_URL=https://${APPLICATION}${ENV}.${DOMAIN}
      #   chmod +x ./configure && ./configure web
      #   behave -t "@Web" \
      #         --no-skipped \
      #         --summary \
      #         --outfile behave-report-frontend.html \
      #         --format behave_html_formatter:HTMLFormatter \
      #           || true
      #   aws s3 cp ./behave-report-frontend.html \
      #             s3://${APPLICATION}-coverage${ENV}/test-coverage/bdd/behave-report-frontend.html
      #   cd ../..
      # Generate documentation
      - |
        npx typedoc
        aws s3 cp ../docs/package/. \
                s3://${APPLICATION}-coverage${ENV}/frontend/ \
                --recursive
        

      # Invalidate Frontend & Coverage Distribution Cache
      - |
        aws cloudfront create-invalidation \
            --distribution-id $COVERAGE_DISTRIBUTION_ID \
            --paths "/*"

cache:
  path:
    - frontend/node_modules